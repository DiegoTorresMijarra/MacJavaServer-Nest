# Lo necesario para ejecutar la aplicación en local
services:
  # PostgreSQL
  postgres-db:
    container_name: macjava-db_postgres
    image: postgres:12-alpine
    restart: always
    env_file: .env.prod
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/macjava.sql
    networks:
      - macjava-networks

  # MongoDB
  mongo-db:
    container_name: macjava-db_mongo
    image: mongo:5.0
    restart: always
    env_file: .env.prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ./database/init.js:/docker-entrypoint-initdb.d/macjava.js:ro
    networks:
      - macjava-networks

  # Servicio de la API REST
  macjava-api-rest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: macjava-api-rest
    restart: always
    env_file: .env.prod
    ports:
      - ${API_PORT}:3000
    volumes:
      - storage-dir:/app/storage-dir
      - ./cert:/app/cert
    networks:
      - macjava-networks
    depends_on:
      - postgres-db
      - mongo-db

# Volume para guardar los datos de la api rest, como las imágenes
volumes:
  storage-dir:

networks:
  macjava-networks:
    driver: bridge